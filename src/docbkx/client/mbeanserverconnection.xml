<?xml version="1.0" encoding="utf-8"?>
<!-- ~ Copyright 2009-2013 Roland Huss ~ ~ Licensed under the Apache License, 
	Version 2.0 (the "License"); ~ you may not use this file except in compliance 
	with the License. ~ You may obtain a copy of the License at ~ ~ http://www.apache.org/licenses/LICENSE-2.0 
	~ ~ Unless required by applicable law or agreed to in writing, software ~ 
	distributed under the License is distributed on an "AS IS" BASIS, ~ WITHOUT 
	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. ~ See the 
	License for the specific language governing permissions and ~ limitations 
	under the License. -->

<section id="client-jmx-adapter">
	<title>MBeanServerConnection adapter</title>
	<para>
		The JMX Adapter library simulates a local or remote
		MBeanServerConnection
		but using the Jolokia protocol to a Jolokia agent
		instead.
		This allows you to use tools that require
		MBeanServerConnection such as
		JConsole, Visual VM or Java Mission
		Control to a JVM that provides a
		Jolokia endpoint.
		There is ongoing work
		to provide plugins for Java Mission Control and
		visualvm.
		Java Mission
		Control plugins can be tried out
		<ulink
			url="https://github.com/skarsaune/jmc-cloud-extensions/blob/master/README.md">here</ulink>
	</para>

	<para>
		Here is how to connect to a JVM with jolokia over the network or
		in
		kubernetes.
	</para>
	<para>
		Bakground: JMX connections support the service locator pattern,
		that allows
		plugin in alternative connection providers
		with given
		connection strings.
	</para>

	<section id="remote-jmx-example">
		<title>JMX Connection to Jolokia</title>
		<para>Example of connecting to a JVM with Jolokia over the network.
			Prerequesites
		</para>
		<itemizedlist>
			<listitem>
				<filename>remote-jmx-adapter-1.7.1-standalone.jar</filename>
				must be on the classpath.(
				<ulink url="../../download.html">Download</ulink>
				)
			</listitem>
			<listitem>
				Jolokia should be running at url
				<ulink url="http://localhost:8778/jolokia/">http://localhost:8778/jolokia/</ulink>
				Either without authentication, or with username "user", and password
				"password"
			</listitem>
		</itemizedlist>
		<programlisting language="java"><![CDATA[   
import javax.management.remote.*;
import javax.management.ObjectName;
import java.util.Arrays;

public class ConnectWithJolokiaDemo {
  public static void main(String[] args) {
    //https will be used if port number fits the pattern *443 
    //or if connect env map contains "jmx.remote.x.check.stub"->"true"
    JMXConnector connector = JMXConnectorFactory
       .connect(
         new JMXServiceURL("service:jmx:jolokia://localhost:8778/jolokia/"), 
         Collections.singletonMap(JMXConnector.CREDENTIALS, 
           Arrays.asList("user", "password")));
    connector.connect();
    System.out.println("Memory used: " + 
      connector.getMBeanServerConnection().getAttribute(
        ObjectName.getInstance("java.lang:type=Memory"),"HeapMemoryUsage"));
  }
}
]]></programlisting>
	</section>
	<section id="kubernetes-jmx-example">
		<title>JMX Connection to JVM running in kubernetes</title>
		<para>Example of connecting to a JVM with Jolokia running in
			Kubernets.
			Prerequesites
		</para>
		<itemizedlist>
			<listitem>
				<filename>remote-jmx-adapter-1.7.1-standalone.jar</filename>
				must be on the classpath.(
				<ulink url="../../download.html">Download</ulink>
				)
			</listitem>
			<listitem>
				<filename>jolokia-kubernetes-1.7.1-standalone.jar</filename>
				must be on the classpath.(
				<ulink url="../../download.html">Download</ulink>
				)
			</listitem>
			<listitem>
				Configuration and authentication for the kubernetes context set up.
				(Typically in
				<filename>~/.kube/config</filename>
				)
			</listitem>
			<listitem>
				Jolokia should be running at port 8778
				in pod
				petclinic-6959c9b4cb-gk8np in namespace jfr in kubernetes context
				docker-desktop
			</listitem>
		</itemizedlist>
		<programlisting language="java"><![CDATA[   
import javax.management.remote.*;
import javax.management.ObjectName;
import org.jolokia.kubernetes.client.KubernetesJmxConnector;

public class ConnectInKubernetesDemo {
  public static void main(String[] args) {
    JMXConnector connector = JMXConnectorFactory
      .connect(new JMXServiceURL("service:jmx:kubernetes:///jfr/petclinic-6959c9b4cb-gk8np:8778/jolokia/"), Collections.singletonMap(KubernetesJmxConnector.KUBERNETES_CLIENT_CONTEXT, "docker-desktop));
    connector.connect();
    System.out.println("Memory used: " + 
      connector.getMBeanServerConnection().getAttribute(
        ObjectName.getInstance("java.lang:type=Memory"),"HeapMemoryUsage"));
  }
}
]]></programlisting>

	</section>
	<section id="jconsole-with-jolokia-support">
		<title>JConsole with support for Jolokia and Kubernetes connections</title>
		<para>Shell command to launch JConsole with jolokia support added to classpath.</para>
		<programlisting language="sh"><![CDATA[
$JAVA_HOME/bin/java \
-classpath "jolokia-jmx-adapter-1.7.1-standalone.jar:\
jolokia-kubernetes-1.7.1-standalone.jar:\
$JAVA_HOME/lib/jconsole.jar:\
$JAVA_HOME/classes" \
-Dapplication.home=$JAVA_HOME \
-Xms8m -Djconsole.showOutputViewer \
sun.tools.jconsole.JConsole
]]></programlisting>
	</section>
</section>
		